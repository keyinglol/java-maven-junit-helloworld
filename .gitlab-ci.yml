stages:
  - build
  - test
  - package
  - deploy

# Use official Docker image for building and deploying
image: docker:latest

# Docker-in-Docker service to manage Docker containers
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay2  # Optimizing Docker's file system driver
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end"

cache:
  paths:
    - .m2/repository


before_script:
  - echo "Using Java and Maven"
  - apt-get update && apt-get install -y maven openjdk-17-jdk
  - export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
  - apk add --no-cache docker-compose  # Install Docker Compose


build:
  stage: build
  script:
    - mvn $MAVEN_CLI_OPTS compile
    - echo "Building the Docker image"
    - docker-compose build  # Build the Docker containers


test:
  stage: test
  script:
    - echo "Running unit + integration tests with coverage..."
    - mvn verify
  artifacts:
    when: always
    reports:
      junit: target/surefire-reports/TEST-*.xml
    paths:
      - target/surefire-reports/
      - target/site/jacoco-both/index.html
      - target/site/jacoco-both/


package:
  stage: package
  script:
    - mvn $MAVEN_CLI_OPTS package
  artifacts:
    paths:
      - target/*.jar


deploy:
  stage: deploy
  script:
    - echo "Running Docker Compose"
    - docker-compose up --build -d  # Run Docker Compose to deploy the app
  only:
    - master  # Deploy only on the main branch
